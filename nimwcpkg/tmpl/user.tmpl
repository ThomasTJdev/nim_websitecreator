#? stdtmpl | standard
#
#template `%`(idx: untyped): untyped =
#  row[idx]
#end template
#
#
#proc genFormLogin(c: var TData, errorMsg = ""): string =
# result = ""
# if not c.loggedIn:
#
#   let standardElements = getRow(db, sql"SELECT head, navbar, footer, title FROM settings")

<head>
  ${standardElements[0]}
</head>

  <div id="login">

    <form name="login" action="/dologin" method="POST" class="box">
      <h3 style="line-height: 1.9rem;">Login to<br>${standardElements[3]}</h3>

      # when defined(demo):
        <div class="notification is-link">
          <p> <b>User:</b> test@test.com</p>
          <p> <b>Pass:</b> test</p>
          <p> <b>2FA: </b> 123456</p>
        </div>
      # end when

      # if errorMsg.len() != 0:
      <div class="notification is-danger" style="text-align: center;font-size: 1.2rem; line-height: 1.8rem;"><b>$errorMsg</b></div>
      # end if

      <div class="field form-group">
        <label class="label">Email</label>
        <div class="control has-icons-left has-icons-right">
          <input type="email" class="input is-rounded" name="email" placeholder="Email" minlength="5" dir="auto" required autofocus
          # when defined(demo):
            value="test@test.com"
          # end when
          >
        </div>
      </div>
      <div class="field form-group">
        <label class="label">Password</label>
        <div class="control has-icons-left has-icons-right">
          <input type="password" class="input is-rounded" name="password" autocomplete="current-password" placeholder="Password" dir="auto" required
          # when defined(demo) or defined(dev):
            minlength="4"  value="test"
          # else:
            minlength="10" value=""
          # end when
          >
        </div>
      </div>
      <details class="field form-group">
        <summary class="label">2 Factor Auth (TOTP)</summary>
        <div class="control has-icons-left has-icons-right">
          <input type="tel" class="input is-rounded has-text-centered is-family-monospace" name="totp" placeholder="6 Digit Number" min="000000" max="999999" step="1" maxlength="6" dir="auto" pattern="\d*" autocomplete="off"
          # when defined(demo):
            value="123456"
          # end when
          >
        </div>
      </details>

      #if useCaptcha:
        <div id="recaptcha">
          <div class="g-recaptcha" data-sitekey="${recaptchaSiteKey}" data-theme="light" style="transform:scale(0.93);-webkit-transform:scale(0.93);transform-origin:0 0;-webkit-transform-origin:0 0;"></div>
          <script src="https://www.google.com/recaptcha/api.js" async defer></script>
        </div>
      #end if

      <div class="field form-group">
        <label class="checkbox">
          <input type="checkbox" title="I agree to the Terms Of Service and Cookies" required checked >
            <a href="/settings/termsofservice"><small><i style="opacity:.5">I accept the Terms of Service</i></small></a>
        </label>
      </div>

      <input href="#" type="submit" class="button is-primary is-fullwidth is-rounded" value="Login" />

      ## DONT TOUCH, HoneyPot: https://github.com/ThomasTJdev/nim_websitecreator/issues/43#issue-403507393
      <input type="password" class="input is-rounded" name="password2" autocomplete="false" tabindex="-1" placeholder="Password" dir="auto" minlength="10" value="" style="
      ${["display:none !important", "visibility:hidden !important", "opacity:0 !important"].rand}
      " >
      ## DONT TOUCH, HoneyPot: https://stackoverflow.com/questions/36227376/better-honeypot-implementation-form-anti-spam/36227377
    </form>
  </div>

  <footer>
    ${standardElements[2]}
  </footer>

  #else:
    <div class="notification is-danger" style="text-align: center">
      <h1>You are already logged in!</h1>
    </div>
  #end if
#end proc
#
#
#
#
#
#
#proc genUsers(c: var TData): string =
# result = ""
#
# let allUsers = getAllRows(db, sql"SELECT id, name, email, status, lastOnline, secretUrl, twofa, avatar FROM person")


<div id="users">
  <h1 class="has-text-centered">Users</h1>

<table class="table is-bordered is-striped is-hoverable is-fullwidth">
  <thead>
    <tr>
      <th>#</th>
      <th>ID</th>
      <th>Name</th>
      <th>Mail</th>
      <th>Last online</th>
      <th>Rank</th>
      <th>2FA</th>
      <th>Avatar</th>
      <th>Delete</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th>#</th>
      <th>ID</th>
      <th>Name</th>
      <th>Mail</th>
      <th>Last online</th>
      <th>Rank</th>
      <th>2FA</th>
      <th>Avatar</th>
      <th>Delete</th>
    </tr>
  </tfoot>
  <tbody>
# var counter: int
# for user in allUsers:
#   when defined(demo):
#     if user[3] == "Admin":
#       continue
#     end if
#   end when
#   counter += 1
  <tr>
    <td> $counter </td>
    <td> ${user[0]} </td>
    <td> ${user[1]} </td>
    <td> ${user[2]} </td>
    #   if user[5] == "":
      <td> ${epochDate(user[4], "YYYY-MM-DD HH:mm")} </td>
      <td> ${user[3]} </td>
    #   else:
      <td> Mail unconfirmed </td>
      <td> Mail unconfirmed </td>
    #   end if
    <td>
    # if c.rank == Admin:
       ${toUpperAscii($(user[6].len > 6))}
    # end if
    </td>
    <td>
    # if user[7].len > 0:
      <a href="${user[7]}" target="_blank">${toUpperAscii($(user[7].len > 0))}</a> </td>
    # else:
      FALSE
    # end if
    <td class="is-danger has-text-centered"><a class="delete" href="/users/delete/${user[0]}" title="Kill ${user[1]} ?"></a></td>
# end for
    </tbody>
  </table>
  <p><b>Total Users: </b><code>${allUsers.len}</code></p>
  <hr>

# if c.rank in [Admin, Moderator]:
  <details>
    <summary class="label">Add new user</summary>
    <form method="post" action="/users/add">
      <div class="field">
        <label class="label">Name</label>
        <input class="input" type="text" name="name" title="MarkDown, ResTructuredText, Plain Text" minlength="2" maxlength="60" required dir="auto" value="" placeholder="Username" style="max-width:50%" onblur="this.value=this.value.replace(/\s\s+/g, ' ').replace(/^\s+|\s+$$/g, '')">
      </div>
      <div class="field">
        <label class="label">Email</label>
        <input class="input" type="email" name="email" required value="" dir="auto" placeholder="user@example.com" minlength="5" style="max-width:50%" onblur="this.value=this.value.replace(/\s\s+/g, ' ').replace(/^\s+|\s+$$/g, '').toLowerCase()"/>
      </div>
      <div class="field">
        <label class="label">Status</label>
        <div class="control select">
          <select name="status">
            <option value="User" selected>User</option>
            <option value="Moderator">Moderator</option>
            # if c.rank == Admin:
              <option value="Admin">Admin</option>
            #end if
          </select>
        </div>
      </div>
      <br>
      <button type="submit" class="userDoAdd button is-success is-small">Add user</button>
    </form>
  </details>
  <hr>
# end if


# if c.rank == Admin:
  <details>
    <summary class="label">Quick user reset</summary>
    <b>Reset user by ID</b>
    <p>
      The <code>name</code> will be changed to the <code>user id</code>. Disables 2 Factor Authentication and choosed Avatar.
      The <code>password</code> and <code>email</code> will not be changed.
      Blogs and Pages created by the user can be deleted.
      The user will be logged out. The user must login as soon as possible to reconfigure.
    </p>
    <form method="post" action="/users/reset">
      <br>
      <input type="tel" id="userid" name="userid" title="User ID" class="input has-text-centered has-text-weight-bold is-family-monospace" placeholder="User ID" min="1" step="1" maxlength="9" pattern="\d*" autocomplete="off" dir="auto" value="" style="width:9em" required /><br>
      <label title="Delete all Pages and Blogs of this user"><input type="checkbox" name="cleanout" id="cleanout" > Delete Pages and Blogs of this user </label>
      <br><br>
      <button type="submit" class="button is-danger is-small">Reset user</button>
    </form>
  </details>
  <hr>
# end if


  <div class="notification is-danger">
    Deleting users can not be undone. Resetting users can not be undone.
  </div>
</div>
#end proc
#
#
#
#
#
#
#proc genUsersProfile(c: var TData): string =
# result = ""
#
# let userData = getAllRows(db, sql"SELECT id, name, email, status, lastOnline, twofa, avatar FROM person WHERE id = ?", c.userid)

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/3.1.4/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropper/3.1.4/cropper.min.js" defer></script>

<center>
  <h1>Profile</h1>
</center>

<div id="user">

# for user in userData:

    <div class="columns">
      <div class="column">

        <form method="POST" action="/users/profile/update" style="background: white; padding: 10px; border: 1px solid grey; border-radius: 4px;">
          <div class="field" style="margin-bottom:9px">
            <label class="label">Name<span style="color: red;font-weight: 600;">*</span></label>
            <input id="name" name="name" type="text" placeholder="name" autocomplete="false" class="input" required minlength="3" maxlength="60" value="${user[1]}" dir="auto" onblur="this.value=this.value.replace(/\s\s+/g, ' ').replace(/^\s+|\s+$$/g, '')">
          </div>

          <div class="field" style="margin-bottom:9px">
            <label class="label">Email<span style="color: red;font-weight: 600;">*</span></label>
            <input id="email" name="email" placeholder="email" type="email" autocomplete="username" class="input" required minlength="3" maxlength="300" value="${user[2]}" dir="auto" onblur="this.value=this.value.replace(/\s\s+/g, ' ').replace(/^\s+|\s+$$/g, '').toLowerCase()">
          </div>

          <div class="field" style="margin-bottom:9px">
            <label class="label">Password<span style="color: red;font-weight: 600;">*</span></label>
            <input id="password" name="password" type="password" placeholder="Password" autocomplete="new-password" class="input" maxlength="300" required value="" dir="auto"
            # when defined(demo) or defined(dev):
              minlength="4"
            # else:
              minlength="10"
            # end when
            >
          </div>

          <div class="field" style="margin-bottom:9px">
            <label class="label">Password<span style="color: red;font-weight: 600;">*</span></label>
            <input id="passwordConfirm" name="passwordConfirm" type="password" autocomplete="new-password" class="input" maxlength="128" required placeholder="Confirm password" value="" dir="auto"
            # when defined(demo) or defined(dev):
              minlength="4"
            # else:
              minlength="10"
            # end when
            >
          </div>

          <details class="field" style="margin-bottom:9px">
            <summary class="label">2 Factor Authentication</summary>
            # if user[5].len() > 0:
              <div class="notification is-success has-text-centered twofaEnabled"><button class="delete"></button> &checkmark; 2FA is Enabled </div>
              <a href="#!" class="button is-danger has-text-warning is-small disable2fa" title="Disable 2FA">Disable</a>
              <br>
            # else:
                <p>Open your <a href="https://freeotp.github.io">2FA App</a> and insert the code below.<br>
                   Test the code in the field below, on successful result press "Save 2FA".<br>
                   You can Enable, Disable and Reset it at any time.
                </p>
                # proc twoFaKey(): string =
                #   when defined(demo): result = "ABCDEFGHIJ"
                #   else:
                #     const items = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
                #     for i in countUp(0, 10):
                #       result.add(rand(items))
                #     end for
                #   end when
                # end template
                # let twoFaKeys = twoFaKey()
                # let twoFaLink = "otpauth://totp/" & $user[2] & "?algorithm=SHA1&digits=6&period=30&secret=" & twoFaKeys
                <small><br>
                Tech Info:
                <ul class="twofaTechList">
                  <li>Type:      TOTP</li>
                  <li>Digits:    6   </li>
                  <li>Algorithm: SHA1</li>
                  <li>Interval:  30  </li>
                  <li>Phone time must be correct.</li>
                  <li>2FA Number must not be 6 identical digits.</li>
                  <li><a href="$twoFaLink" title="2FA Provisioning URL Link"><small>$twoFaLink</small></a></li>
                </ul>
                </small>
                <br>
                <input type="text" id="twofa-key" class="input  has-text-centered has-text-weight-bold is-family-monospace is-narrow" disabled="disabled" style="width:10em" value="$twoFaKeys"/>&nbsp;
                <input type="tel" id="twofa-testcode" class="input has-text-centered has-text-weight-bold is-family-monospace" placeholder="Test 2FA" min="000000" max="999999" step="1" maxlength="6" pattern="\d*" autocomplete="off" dir="auto" value="" style="width:6em"/>
                <br><br>
                <div>
                  <a href="#!" class="button is-info is-pulled-left test2fa">Test 2FA</a>
                  <a href="#!" class="button is-success is-pulled-right save2fa is-invisible">Save 2FA</a>
                </div>
                <br><br>
            # end if
          </details>
          <br>

          <div class="save">
            <button type="submit" class="save submit button is-success is-fullwidth">Save</button>
          </div>
        </form>

      </div>

      <div class="column">

        <div class="column" style="background: white; padding: 10px; border: 1px solid grey; border-radius: 4px;">

          <h5 class="has-text-centered">Avatar</h5>
          <center>
            <img class="is-128x128 libravatar" title="${c.email}'s Avatar" alt="${c.email}'s Avatar" src="${if user[6] == "": "/images/avatar.jpg" else: user[6]}" style="width:128px;height:128px;text-align:center">
          </center>
          <a href="/users/profile/avatar" class="button is-success is-fullwidth">Change photo</a>

          <div class="field" style="margin-bottom:9px">
            <label class="label">Status</label>
            <input type="text" class="input" disabled="disabled" value="${user[3]}" dir="auto">
          </div>

          <div class="field" style="margin-bottom:9px">
            <label class="label">ID</label>
            <input type="text" class="input" disabled="disabled" value="${user[0]}" dir="auto">
          </div>

          <div class="field" style="margin-bottom:9px">
            <label class="label">Last activity</label>
            <input type="text" class="input" disabled="disabled" value="${ fromUnix(parseInt(user[4])).utc }" dir="auto">
          </div>

        </div>
      </div>
    </div>

# end for
</div>
#end proc
#
#
#
#proc genAvatar(c: var TData): string =
#  result = ""
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/3.1.6/cropper.min.css"/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropper/3.1.6/cropper.min.js" defer ></script>
<h1 class="has-text-centered">Choose your Avatar</h1>
<div id="user" class="images" style="background:white;padding:9px;border:1px solid grey;border-radius:4px">
<form action="/users/profile/avatar/save" method="POST">
<div class="columns">
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="/users/photo/stream/${c.userid}.png">
    <img class="image is-128x128 libravatar" src="/users/photo/stream/${c.userid}.png" title="Custom" alt="Custom" style="max-width:99%">
    </label>
  </div>
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="/images/avatar.jpg">
      <img class="image is-128x128 libravatar" src="/images/avatar.jpg" title="Default Avatar" alt="Default Avatar">
    </label>
  </div>
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="${ getLibravatarUrl($c.email, size=250, default="https://seccdn.libravatar.org/static/img/nobody/250.png") }">
      <img class="image is-128x128 libravatar" src="${ getLibravatarUrl($c.email, size=250, default="https://seccdn.libravatar.org/static/img/nobody/250.png") }" title="Libravatar / Gravatar" alt="Libravatar / Gravatar">
    </label>
  </div>
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="${ getLibravatarUrl("", size=128, default="robohash", forcedefault=true) }">
      <img class="image is-128x128 libravatar" src="${ getLibravatarUrl("", size=128, default="robohash", forcedefault=true) }" title="Robohash" alt="Robohash">
    </label>
  </div>
</div>
<br>
<div class="columns">
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="${ getLibravatarUrl("", size=128, default="identicon", forcedefault=true) }">
      <img class="image is-128x128 libravatar" src="${ getLibravatarUrl("", size=128, default="identicon", forcedefault=true) }" title="Identicon" alt="Identicon">
    </label>
  </div>
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="${ getLibravatarUrl("", size=128, default="monsterid", forcedefault=true) }">
      <img class="image is-128x128 libravatar" src="${ getLibravatarUrl("", size=128, default="monsterid", forcedefault=true) }" title="MonsterID" alt="MonsterID">
    </label>
  </div>
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="${ getLibravatarUrl("", size=128, default="retro", forcedefault=true) }">
      <img class="image is-128x128 libravatar" src="${ getLibravatarUrl("", size=128, default="retro", forcedefault=true) }" title="Retro" alt="Retro">
    </label>
  </div>
  <div class="column">
    <label>
    <input type="radio" name="avatar" required value="${ getLibravatarUrl("", size=128, default="wavatar", forcedefault=true) }">
      <img class="image is-128x128 libravatar" src="${ getLibravatarUrl("", size=128, default="wavatar", forcedefault=true) }" title="Wavatar" alt="Wavatar">
    </label>
  </div>
</div>
<button type="submit" title="Save Avatar" class="newblogSave button is-success is-fullwidth">Save</button>
</form>
<hr>
<details>
  <summary>Libravatar</summary>
  <center>
  <a href="https://www.libravatar.org/accounts/upload_photo/" title="JPG, PNG, GIF" class="button is-small" target="_blank">Upload new photo</a>&nbsp;
  <a href="https://www.libravatar.org/accounts/import_photo/" class="button is-small" target="_blank">Import photo from other services</a>
  </center>
</details>
<hr>
<details>
  <summary>Upload Custom</summary>
  <center>
  <div>
    <img id="userPictureEdit" class="image is-128x128 libravatar" src="/users/photo/stream/${c.userid}.png" title="Custom" alt="Custom" style="max-width:99%">
  <div>
  <input type="file" id="userPictureEditTemp" accept=".jpg,.jpeg,.png" title="JPG, PNG" /><br>
  <button id="userPictureSave" class="button is-small">Upload</button>
  </center>
</details>
<br>
</div>
# end proc
